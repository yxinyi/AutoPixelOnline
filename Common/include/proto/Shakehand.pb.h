// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Shakehand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Shakehand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Shakehand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Shakehand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Shakehand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Shakehand_2eproto;
class AuthenticationEvent;
class AuthenticationEventDefaultTypeInternal;
extern AuthenticationEventDefaultTypeInternal _AuthenticationEvent_default_instance_;
class ShakeHandEvent;
class ShakeHandEventDefaultTypeInternal;
extern ShakeHandEventDefaultTypeInternal _ShakeHandEvent_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AuthenticationEvent* Arena::CreateMaybeMessage<::AuthenticationEvent>(Arena*);
template<> ::ShakeHandEvent* Arena::CreateMaybeMessage<::ShakeHandEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ShakeHandEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShakeHandEvent) */ {
 public:
  ShakeHandEvent();
  virtual ~ShakeHandEvent();

  ShakeHandEvent(const ShakeHandEvent& from);
  ShakeHandEvent(ShakeHandEvent&& from) noexcept
    : ShakeHandEvent() {
    *this = ::std::move(from);
  }

  inline ShakeHandEvent& operator=(const ShakeHandEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShakeHandEvent& operator=(ShakeHandEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShakeHandEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShakeHandEvent* internal_default_instance() {
    return reinterpret_cast<const ShakeHandEvent*>(
               &_ShakeHandEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShakeHandEvent& a, ShakeHandEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ShakeHandEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShakeHandEvent* New() const final {
    return CreateMaybeMessage<ShakeHandEvent>(nullptr);
  }

  ShakeHandEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShakeHandEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShakeHandEvent& from);
  void MergeFrom(const ShakeHandEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShakeHandEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShakeHandEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Shakehand_2eproto);
    return ::descriptor_table_Shakehand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcNameFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // bytes src_name = 2;
  void clear_src_name();
  const std::string& src_name() const;
  void set_src_name(const std::string& value);
  void set_src_name(std::string&& value);
  void set_src_name(const char* value);
  void set_src_name(const void* value, size_t size);
  std::string* mutable_src_name();
  std::string* release_src_name();
  void set_allocated_src_name(std::string* src_name);

  // uint32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:ShakeHandEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Shakehand_2eproto;
};
// -------------------------------------------------------------------

class AuthenticationEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AuthenticationEvent) */ {
 public:
  AuthenticationEvent();
  virtual ~AuthenticationEvent();

  AuthenticationEvent(const AuthenticationEvent& from);
  AuthenticationEvent(AuthenticationEvent&& from) noexcept
    : AuthenticationEvent() {
    *this = ::std::move(from);
  }

  inline AuthenticationEvent& operator=(const AuthenticationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationEvent& operator=(AuthenticationEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticationEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticationEvent* internal_default_instance() {
    return reinterpret_cast<const AuthenticationEvent*>(
               &_AuthenticationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthenticationEvent& a, AuthenticationEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticationEvent* New() const final {
    return CreateMaybeMessage<AuthenticationEvent>(nullptr);
  }

  AuthenticationEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticationEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticationEvent& from);
  void MergeFrom(const AuthenticationEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AuthenticationEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Shakehand_2eproto);
    return ::descriptor_table_Shakehand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeTypeFieldNumber = 1,
  };
  // uint32 node_type = 1;
  void clear_node_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_type() const;
  void set_node_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:AuthenticationEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Shakehand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShakeHandEvent

// uint32 state = 1;
inline void ShakeHandEvent::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShakeHandEvent::state() const {
  // @@protoc_insertion_point(field_get:ShakeHandEvent.state)
  return state_;
}
inline void ShakeHandEvent::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:ShakeHandEvent.state)
}

// bytes src_name = 2;
inline void ShakeHandEvent::clear_src_name() {
  src_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShakeHandEvent::src_name() const {
  // @@protoc_insertion_point(field_get:ShakeHandEvent.src_name)
  return src_name_.GetNoArena();
}
inline void ShakeHandEvent::set_src_name(const std::string& value) {
  
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ShakeHandEvent.src_name)
}
inline void ShakeHandEvent::set_src_name(std::string&& value) {
  
  src_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ShakeHandEvent.src_name)
}
inline void ShakeHandEvent::set_src_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ShakeHandEvent.src_name)
}
inline void ShakeHandEvent::set_src_name(const void* value, size_t size) {
  
  src_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ShakeHandEvent.src_name)
}
inline std::string* ShakeHandEvent::mutable_src_name() {
  
  // @@protoc_insertion_point(field_mutable:ShakeHandEvent.src_name)
  return src_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShakeHandEvent::release_src_name() {
  // @@protoc_insertion_point(field_release:ShakeHandEvent.src_name)
  
  return src_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShakeHandEvent::set_allocated_src_name(std::string* src_name) {
  if (src_name != nullptr) {
    
  } else {
    
  }
  src_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_name);
  // @@protoc_insertion_point(field_set_allocated:ShakeHandEvent.src_name)
}

// -------------------------------------------------------------------

// AuthenticationEvent

// uint32 node_type = 1;
inline void AuthenticationEvent::clear_node_type() {
  node_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AuthenticationEvent::node_type() const {
  // @@protoc_insertion_point(field_get:AuthenticationEvent.node_type)
  return node_type_;
}
inline void AuthenticationEvent::set_node_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:AuthenticationEvent.node_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Shakehand_2eproto
