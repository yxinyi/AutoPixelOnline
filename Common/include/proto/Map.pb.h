// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Map_2eproto;
class MapBlock;
class MapBlockDefaultTypeInternal;
extern MapBlockDefaultTypeInternal _MapBlock_default_instance_;
class MapData;
class MapDataDefaultTypeInternal;
extern MapDataDefaultTypeInternal _MapData_default_instance_;
class MapRows;
class MapRowsDefaultTypeInternal;
extern MapRowsDefaultTypeInternal _MapRows_default_instance_;
class MapTickUpdate;
class MapTickUpdateDefaultTypeInternal;
extern MapTickUpdateDefaultTypeInternal _MapTickUpdate_default_instance_;
class PlayerMoveTo;
class PlayerMoveToDefaultTypeInternal;
extern PlayerMoveToDefaultTypeInternal _PlayerMoveTo_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SceneMapInfo;
class SceneMapInfoDefaultTypeInternal;
extern SceneMapInfoDefaultTypeInternal _SceneMapInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MapBlock* Arena::CreateMaybeMessage<::MapBlock>(Arena*);
template<> ::MapData* Arena::CreateMaybeMessage<::MapData>(Arena*);
template<> ::MapRows* Arena::CreateMaybeMessage<::MapRows>(Arena*);
template<> ::MapTickUpdate* Arena::CreateMaybeMessage<::MapTickUpdate>(Arena*);
template<> ::PlayerMoveTo* Arena::CreateMaybeMessage<::PlayerMoveTo>(Arena*);
template<> ::Position* Arena::CreateMaybeMessage<::Position>(Arena*);
template<> ::SceneMapInfo* Arena::CreateMaybeMessage<::SceneMapInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Map_2eproto);
    return ::descriptor_table_Map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostionXFieldNumber = 1,
    kPostionYFieldNumber = 2,
  };
  // float postion_x = 1;
  void clear_postion_x();
  float postion_x() const;
  void set_postion_x(float value);

  // float postion_y = 2;
  void clear_postion_y();
  float postion_y() const;
  void set_postion_y(float value);

  // @@protoc_insertion_point(class_scope:Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float postion_x_;
  float postion_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// -------------------------------------------------------------------

class PlayerMoveTo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerMoveTo) */ {
 public:
  PlayerMoveTo();
  virtual ~PlayerMoveTo();

  PlayerMoveTo(const PlayerMoveTo& from);
  PlayerMoveTo(PlayerMoveTo&& from) noexcept
    : PlayerMoveTo() {
    *this = ::std::move(from);
  }

  inline PlayerMoveTo& operator=(const PlayerMoveTo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerMoveTo& operator=(PlayerMoveTo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerMoveTo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMoveTo* internal_default_instance() {
    return reinterpret_cast<const PlayerMoveTo*>(
               &_PlayerMoveTo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerMoveTo& a, PlayerMoveTo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerMoveTo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoveTo* New() const final {
    return CreateMaybeMessage<PlayerMoveTo>(nullptr);
  }

  PlayerMoveTo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMoveTo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerMoveTo& from);
  void MergeFrom(const PlayerMoveTo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMoveTo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerMoveTo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Map_2eproto);
    return ::descriptor_table_Map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostionFieldNumber = 1,
  };
  // .Position postion = 1;
  bool has_postion() const;
  void clear_postion();
  const ::Position& postion() const;
  ::Position* release_postion();
  ::Position* mutable_postion();
  void set_allocated_postion(::Position* postion);

  // @@protoc_insertion_point(class_scope:PlayerMoveTo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Position* postion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// -------------------------------------------------------------------

class MapData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MapData) */ {
 public:
  MapData();
  virtual ~MapData();

  MapData(const MapData& from);
  MapData(MapData&& from) noexcept
    : MapData() {
    *this = ::std::move(from);
  }

  inline MapData& operator=(const MapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapData& operator=(MapData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapData* internal_default_instance() {
    return reinterpret_cast<const MapData*>(
               &_MapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapData& a, MapData& b) {
    a.Swap(&b);
  }
  inline void Swap(MapData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapData* New() const final {
    return CreateMaybeMessage<MapData>(nullptr);
  }

  MapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapData& from);
  void MergeFrom(const MapData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MapData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Map_2eproto);
    return ::descriptor_table_Map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapPostionFieldNumber = 2,
    kVectorFieldNumber = 3,
    kMapOidFieldNumber = 4,
    kLastMapTidFieldNumber = 5,
    kCreatureOidFieldNumber = 6,
    kSpeedFieldNumber = 1,
  };
  // .Position map_postion = 2;
  bool has_map_postion() const;
  void clear_map_postion();
  const ::Position& map_postion() const;
  ::Position* release_map_postion();
  ::Position* mutable_map_postion();
  void set_allocated_map_postion(::Position* map_postion);

  // .Position vector = 3;
  bool has_vector() const;
  void clear_vector();
  const ::Position& vector() const;
  ::Position* release_vector();
  ::Position* mutable_vector();
  void set_allocated_vector(::Position* vector);

  // uint64 map_oid = 4;
  void clear_map_oid();
  ::PROTOBUF_NAMESPACE_ID::uint64 map_oid() const;
  void set_map_oid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 last_map_tid = 5;
  void clear_last_map_tid();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_map_tid() const;
  void set_last_map_tid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 creature_oid = 6;
  void clear_creature_oid();
  ::PROTOBUF_NAMESPACE_ID::uint64 creature_oid() const;
  void set_creature_oid(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // float speed = 1;
  void clear_speed();
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:MapData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Position* map_postion_;
  ::Position* vector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 map_oid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_map_tid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 creature_oid_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// -------------------------------------------------------------------

class MapTickUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MapTickUpdate) */ {
 public:
  MapTickUpdate();
  virtual ~MapTickUpdate();

  MapTickUpdate(const MapTickUpdate& from);
  MapTickUpdate(MapTickUpdate&& from) noexcept
    : MapTickUpdate() {
    *this = ::std::move(from);
  }

  inline MapTickUpdate& operator=(const MapTickUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapTickUpdate& operator=(MapTickUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapTickUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapTickUpdate* internal_default_instance() {
    return reinterpret_cast<const MapTickUpdate*>(
               &_MapTickUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapTickUpdate& a, MapTickUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MapTickUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapTickUpdate* New() const final {
    return CreateMaybeMessage<MapTickUpdate>(nullptr);
  }

  MapTickUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapTickUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapTickUpdate& from);
  void MergeFrom(const MapTickUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapTickUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MapTickUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Map_2eproto);
    return ::descriptor_table_Map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapInfosFieldNumber = 1,
  };
  // repeated bytes map_infos = 1;
  int map_infos_size() const;
  void clear_map_infos();
  const std::string& map_infos(int index) const;
  std::string* mutable_map_infos(int index);
  void set_map_infos(int index, const std::string& value);
  void set_map_infos(int index, std::string&& value);
  void set_map_infos(int index, const char* value);
  void set_map_infos(int index, const void* value, size_t size);
  std::string* add_map_infos();
  void add_map_infos(const std::string& value);
  void add_map_infos(std::string&& value);
  void add_map_infos(const char* value);
  void add_map_infos(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map_infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map_infos();

  // @@protoc_insertion_point(class_scope:MapTickUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// -------------------------------------------------------------------

class MapBlock :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MapBlock) */ {
 public:
  MapBlock();
  virtual ~MapBlock();

  MapBlock(const MapBlock& from);
  MapBlock(MapBlock&& from) noexcept
    : MapBlock() {
    *this = ::std::move(from);
  }

  inline MapBlock& operator=(const MapBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapBlock& operator=(MapBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapBlock* internal_default_instance() {
    return reinterpret_cast<const MapBlock*>(
               &_MapBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MapBlock& a, MapBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(MapBlock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapBlock* New() const final {
    return CreateMaybeMessage<MapBlock>(nullptr);
  }

  MapBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapBlock& from);
  void MergeFrom(const MapBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MapBlock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Map_2eproto);
    return ::descriptor_table_Map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // uint32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:MapBlock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// -------------------------------------------------------------------

class MapRows :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MapRows) */ {
 public:
  MapRows();
  virtual ~MapRows();

  MapRows(const MapRows& from);
  MapRows(MapRows&& from) noexcept
    : MapRows() {
    *this = ::std::move(from);
  }

  inline MapRows& operator=(const MapRows& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRows& operator=(MapRows&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapRows& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapRows* internal_default_instance() {
    return reinterpret_cast<const MapRows*>(
               &_MapRows_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MapRows& a, MapRows& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRows* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapRows* New() const final {
    return CreateMaybeMessage<MapRows>(nullptr);
  }

  MapRows* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapRows>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapRows& from);
  void MergeFrom(const MapRows& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRows* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MapRows";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Map_2eproto);
    return ::descriptor_table_Map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 1,
  };
  // repeated .MapBlock rows = 1;
  int rows_size() const;
  void clear_rows();
  ::MapBlock* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapBlock >*
      mutable_rows();
  const ::MapBlock& rows(int index) const;
  ::MapBlock* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapBlock >&
      rows() const;

  // @@protoc_insertion_point(class_scope:MapRows)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapBlock > rows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// -------------------------------------------------------------------

class SceneMapInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneMapInfo) */ {
 public:
  SceneMapInfo();
  virtual ~SceneMapInfo();

  SceneMapInfo(const SceneMapInfo& from);
  SceneMapInfo(SceneMapInfo&& from) noexcept
    : SceneMapInfo() {
    *this = ::std::move(from);
  }

  inline SceneMapInfo& operator=(const SceneMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneMapInfo& operator=(SceneMapInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneMapInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneMapInfo* internal_default_instance() {
    return reinterpret_cast<const SceneMapInfo*>(
               &_SceneMapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SceneMapInfo& a, SceneMapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneMapInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneMapInfo* New() const final {
    return CreateMaybeMessage<SceneMapInfo>(nullptr);
  }

  SceneMapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneMapInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneMapInfo& from);
  void MergeFrom(const SceneMapInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneMapInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneMapInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Map_2eproto);
    return ::descriptor_table_Map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapInfoFieldNumber = 1,
    kMapBlockSizeFieldNumber = 2,
  };
  // repeated .MapRows map_info = 1;
  int map_info_size() const;
  void clear_map_info();
  ::MapRows* mutable_map_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapRows >*
      mutable_map_info();
  const ::MapRows& map_info(int index) const;
  ::MapRows* add_map_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapRows >&
      map_info() const;

  // uint32 map_block_size = 2;
  void clear_map_block_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 map_block_size() const;
  void set_map_block_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:SceneMapInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapRows > map_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 map_block_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// float postion_x = 1;
inline void Position::clear_postion_x() {
  postion_x_ = 0;
}
inline float Position::postion_x() const {
  // @@protoc_insertion_point(field_get:Position.postion_x)
  return postion_x_;
}
inline void Position::set_postion_x(float value) {
  
  postion_x_ = value;
  // @@protoc_insertion_point(field_set:Position.postion_x)
}

// float postion_y = 2;
inline void Position::clear_postion_y() {
  postion_y_ = 0;
}
inline float Position::postion_y() const {
  // @@protoc_insertion_point(field_get:Position.postion_y)
  return postion_y_;
}
inline void Position::set_postion_y(float value) {
  
  postion_y_ = value;
  // @@protoc_insertion_point(field_set:Position.postion_y)
}

// -------------------------------------------------------------------

// PlayerMoveTo

// .Position postion = 1;
inline bool PlayerMoveTo::has_postion() const {
  return this != internal_default_instance() && postion_ != nullptr;
}
inline void PlayerMoveTo::clear_postion() {
  if (GetArenaNoVirtual() == nullptr && postion_ != nullptr) {
    delete postion_;
  }
  postion_ = nullptr;
}
inline const ::Position& PlayerMoveTo::postion() const {
  const ::Position* p = postion_;
  // @@protoc_insertion_point(field_get:PlayerMoveTo.postion)
  return p != nullptr ? *p : *reinterpret_cast<const ::Position*>(
      &::_Position_default_instance_);
}
inline ::Position* PlayerMoveTo::release_postion() {
  // @@protoc_insertion_point(field_release:PlayerMoveTo.postion)
  
  ::Position* temp = postion_;
  postion_ = nullptr;
  return temp;
}
inline ::Position* PlayerMoveTo::mutable_postion() {
  
  if (postion_ == nullptr) {
    auto* p = CreateMaybeMessage<::Position>(GetArenaNoVirtual());
    postion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:PlayerMoveTo.postion)
  return postion_;
}
inline void PlayerMoveTo::set_allocated_postion(::Position* postion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete postion_;
  }
  if (postion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      postion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postion, submessage_arena);
    }
    
  } else {
    
  }
  postion_ = postion;
  // @@protoc_insertion_point(field_set_allocated:PlayerMoveTo.postion)
}

// -------------------------------------------------------------------

// MapData

// float speed = 1;
inline void MapData::clear_speed() {
  speed_ = 0;
}
inline float MapData::speed() const {
  // @@protoc_insertion_point(field_get:MapData.speed)
  return speed_;
}
inline void MapData::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:MapData.speed)
}

// .Position map_postion = 2;
inline bool MapData::has_map_postion() const {
  return this != internal_default_instance() && map_postion_ != nullptr;
}
inline void MapData::clear_map_postion() {
  if (GetArenaNoVirtual() == nullptr && map_postion_ != nullptr) {
    delete map_postion_;
  }
  map_postion_ = nullptr;
}
inline const ::Position& MapData::map_postion() const {
  const ::Position* p = map_postion_;
  // @@protoc_insertion_point(field_get:MapData.map_postion)
  return p != nullptr ? *p : *reinterpret_cast<const ::Position*>(
      &::_Position_default_instance_);
}
inline ::Position* MapData::release_map_postion() {
  // @@protoc_insertion_point(field_release:MapData.map_postion)
  
  ::Position* temp = map_postion_;
  map_postion_ = nullptr;
  return temp;
}
inline ::Position* MapData::mutable_map_postion() {
  
  if (map_postion_ == nullptr) {
    auto* p = CreateMaybeMessage<::Position>(GetArenaNoVirtual());
    map_postion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MapData.map_postion)
  return map_postion_;
}
inline void MapData::set_allocated_map_postion(::Position* map_postion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_postion_;
  }
  if (map_postion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map_postion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_postion, submessage_arena);
    }
    
  } else {
    
  }
  map_postion_ = map_postion;
  // @@protoc_insertion_point(field_set_allocated:MapData.map_postion)
}

// .Position vector = 3;
inline bool MapData::has_vector() const {
  return this != internal_default_instance() && vector_ != nullptr;
}
inline void MapData::clear_vector() {
  if (GetArenaNoVirtual() == nullptr && vector_ != nullptr) {
    delete vector_;
  }
  vector_ = nullptr;
}
inline const ::Position& MapData::vector() const {
  const ::Position* p = vector_;
  // @@protoc_insertion_point(field_get:MapData.vector)
  return p != nullptr ? *p : *reinterpret_cast<const ::Position*>(
      &::_Position_default_instance_);
}
inline ::Position* MapData::release_vector() {
  // @@protoc_insertion_point(field_release:MapData.vector)
  
  ::Position* temp = vector_;
  vector_ = nullptr;
  return temp;
}
inline ::Position* MapData::mutable_vector() {
  
  if (vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::Position>(GetArenaNoVirtual());
    vector_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MapData.vector)
  return vector_;
}
inline void MapData::set_allocated_vector(::Position* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vector_;
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:MapData.vector)
}

// uint64 map_oid = 4;
inline void MapData::clear_map_oid() {
  map_oid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapData::map_oid() const {
  // @@protoc_insertion_point(field_get:MapData.map_oid)
  return map_oid_;
}
inline void MapData::set_map_oid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  map_oid_ = value;
  // @@protoc_insertion_point(field_set:MapData.map_oid)
}

// uint64 last_map_tid = 5;
inline void MapData::clear_last_map_tid() {
  last_map_tid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapData::last_map_tid() const {
  // @@protoc_insertion_point(field_get:MapData.last_map_tid)
  return last_map_tid_;
}
inline void MapData::set_last_map_tid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_map_tid_ = value;
  // @@protoc_insertion_point(field_set:MapData.last_map_tid)
}

// uint64 creature_oid = 6;
inline void MapData::clear_creature_oid() {
  creature_oid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapData::creature_oid() const {
  // @@protoc_insertion_point(field_get:MapData.creature_oid)
  return creature_oid_;
}
inline void MapData::set_creature_oid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  creature_oid_ = value;
  // @@protoc_insertion_point(field_set:MapData.creature_oid)
}

// -------------------------------------------------------------------

// MapTickUpdate

// repeated bytes map_infos = 1;
inline int MapTickUpdate::map_infos_size() const {
  return map_infos_.size();
}
inline void MapTickUpdate::clear_map_infos() {
  map_infos_.Clear();
}
inline const std::string& MapTickUpdate::map_infos(int index) const {
  // @@protoc_insertion_point(field_get:MapTickUpdate.map_infos)
  return map_infos_.Get(index);
}
inline std::string* MapTickUpdate::mutable_map_infos(int index) {
  // @@protoc_insertion_point(field_mutable:MapTickUpdate.map_infos)
  return map_infos_.Mutable(index);
}
inline void MapTickUpdate::set_map_infos(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MapTickUpdate.map_infos)
  map_infos_.Mutable(index)->assign(value);
}
inline void MapTickUpdate::set_map_infos(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MapTickUpdate.map_infos)
  map_infos_.Mutable(index)->assign(std::move(value));
}
inline void MapTickUpdate::set_map_infos(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  map_infos_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MapTickUpdate.map_infos)
}
inline void MapTickUpdate::set_map_infos(int index, const void* value, size_t size) {
  map_infos_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MapTickUpdate.map_infos)
}
inline std::string* MapTickUpdate::add_map_infos() {
  // @@protoc_insertion_point(field_add_mutable:MapTickUpdate.map_infos)
  return map_infos_.Add();
}
inline void MapTickUpdate::add_map_infos(const std::string& value) {
  map_infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MapTickUpdate.map_infos)
}
inline void MapTickUpdate::add_map_infos(std::string&& value) {
  map_infos_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MapTickUpdate.map_infos)
}
inline void MapTickUpdate::add_map_infos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  map_infos_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MapTickUpdate.map_infos)
}
inline void MapTickUpdate::add_map_infos(const void* value, size_t size) {
  map_infos_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MapTickUpdate.map_infos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MapTickUpdate::map_infos() const {
  // @@protoc_insertion_point(field_list:MapTickUpdate.map_infos)
  return map_infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MapTickUpdate::mutable_map_infos() {
  // @@protoc_insertion_point(field_mutable_list:MapTickUpdate.map_infos)
  return &map_infos_;
}

// -------------------------------------------------------------------

// MapBlock

// uint32 state = 1;
inline void MapBlock::clear_state() {
  state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapBlock::state() const {
  // @@protoc_insertion_point(field_get:MapBlock.state)
  return state_;
}
inline void MapBlock::set_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:MapBlock.state)
}

// -------------------------------------------------------------------

// MapRows

// repeated .MapBlock rows = 1;
inline int MapRows::rows_size() const {
  return rows_.size();
}
inline void MapRows::clear_rows() {
  rows_.Clear();
}
inline ::MapBlock* MapRows::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:MapRows.rows)
  return rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapBlock >*
MapRows::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:MapRows.rows)
  return &rows_;
}
inline const ::MapBlock& MapRows::rows(int index) const {
  // @@protoc_insertion_point(field_get:MapRows.rows)
  return rows_.Get(index);
}
inline ::MapBlock* MapRows::add_rows() {
  // @@protoc_insertion_point(field_add:MapRows.rows)
  return rows_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapBlock >&
MapRows::rows() const {
  // @@protoc_insertion_point(field_list:MapRows.rows)
  return rows_;
}

// -------------------------------------------------------------------

// SceneMapInfo

// repeated .MapRows map_info = 1;
inline int SceneMapInfo::map_info_size() const {
  return map_info_.size();
}
inline void SceneMapInfo::clear_map_info() {
  map_info_.Clear();
}
inline ::MapRows* SceneMapInfo::mutable_map_info(int index) {
  // @@protoc_insertion_point(field_mutable:SceneMapInfo.map_info)
  return map_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapRows >*
SceneMapInfo::mutable_map_info() {
  // @@protoc_insertion_point(field_mutable_list:SceneMapInfo.map_info)
  return &map_info_;
}
inline const ::MapRows& SceneMapInfo::map_info(int index) const {
  // @@protoc_insertion_point(field_get:SceneMapInfo.map_info)
  return map_info_.Get(index);
}
inline ::MapRows* SceneMapInfo::add_map_info() {
  // @@protoc_insertion_point(field_add:SceneMapInfo.map_info)
  return map_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MapRows >&
SceneMapInfo::map_info() const {
  // @@protoc_insertion_point(field_list:SceneMapInfo.map_info)
  return map_info_;
}

// uint32 map_block_size = 2;
inline void SceneMapInfo::clear_map_block_size() {
  map_block_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneMapInfo::map_block_size() const {
  // @@protoc_insertion_point(field_get:SceneMapInfo.map_block_size)
  return map_block_size_;
}
inline void SceneMapInfo::set_map_block_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  map_block_size_ = value;
  // @@protoc_insertion_point(field_set:SceneMapInfo.map_block_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Map_2eproto
