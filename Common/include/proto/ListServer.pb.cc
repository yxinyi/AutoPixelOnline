// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ListServer.proto

#include "ListServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class RetrieveServerConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetrieveServerConfigReq> _instance;
} _RetrieveServerConfigReq_default_instance_;
class RetrieveServerConfigAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetrieveServerConfigAck> _instance;
} _RetrieveServerConfigAck_default_instance_;
static void InitDefaultsscc_info_RetrieveServerConfigAck_ListServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RetrieveServerConfigAck_default_instance_;
    new (ptr) ::RetrieveServerConfigAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RetrieveServerConfigAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetrieveServerConfigAck_ListServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RetrieveServerConfigAck_ListServer_2eproto}, {}};

static void InitDefaultsscc_info_RetrieveServerConfigReq_ListServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RetrieveServerConfigReq_default_instance_;
    new (ptr) ::RetrieveServerConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RetrieveServerConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RetrieveServerConfigReq_ListServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RetrieveServerConfigReq_ListServer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ListServer_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ListServer_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ListServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ListServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigReq, server_type_),
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigReq, server_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigAck, result_state_),
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigAck, listen_ip_),
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigAck, listen_port_),
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigAck, db_ip_),
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigAck, db_port_),
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigAck, gate_ip_),
  PROTOBUF_FIELD_OFFSET(::RetrieveServerConfigAck, gate_port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RetrieveServerConfigReq)},
  { 7, -1, sizeof(::RetrieveServerConfigAck)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RetrieveServerConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RetrieveServerConfigAck_default_instance_),
};

const char descriptor_table_protodef_ListServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020ListServer.proto\"G\n\027RetrieveServerConf"
  "igReq\022\023\n\013server_type\030\001 \001(\r\022\027\n\017server_gro"
  "up_id\030\002 \001(\r\"\354\001\n\027RetrieveServerConfigAck\022"
  ":\n\014result_state\030\001 \001(\0162$.RetrieveServerCo"
  "nfigAck.checkResult\022\021\n\tlisten_ip\030\002 \001(\t\022\023"
  "\n\013listen_port\030\003 \001(\r\022\r\n\005db_ip\030\004 \001(\t\022\017\n\007db"
  "_port\030\005 \001(\r\022\017\n\007gate_ip\030\006 \001(\t\022\021\n\tgate_por"
  "t\030\007 \001(\r\")\n\013checkResult\022\013\n\007success\020\000\022\r\n\tn"
  "otExists\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ListServer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ListServer_2eproto_sccs[2] = {
  &scc_info_RetrieveServerConfigAck_ListServer_2eproto.base,
  &scc_info_RetrieveServerConfigReq_ListServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ListServer_2eproto_once;
static bool descriptor_table_ListServer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ListServer_2eproto = {
  &descriptor_table_ListServer_2eproto_initialized, descriptor_table_protodef_ListServer_2eproto, "ListServer.proto", 338,
  &descriptor_table_ListServer_2eproto_once, descriptor_table_ListServer_2eproto_sccs, descriptor_table_ListServer_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ListServer_2eproto::offsets,
  file_level_metadata_ListServer_2eproto, 2, file_level_enum_descriptors_ListServer_2eproto, file_level_service_descriptors_ListServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ListServer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ListServer_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RetrieveServerConfigAck_checkResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ListServer_2eproto);
  return file_level_enum_descriptors_ListServer_2eproto[0];
}
bool RetrieveServerConfigAck_checkResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RetrieveServerConfigAck_checkResult RetrieveServerConfigAck::success;
constexpr RetrieveServerConfigAck_checkResult RetrieveServerConfigAck::notExists;
constexpr RetrieveServerConfigAck_checkResult RetrieveServerConfigAck::checkResult_MIN;
constexpr RetrieveServerConfigAck_checkResult RetrieveServerConfigAck::checkResult_MAX;
constexpr int RetrieveServerConfigAck::checkResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RetrieveServerConfigReq::InitAsDefaultInstance() {
}
class RetrieveServerConfigReq::_Internal {
 public:
};

RetrieveServerConfigReq::RetrieveServerConfigReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RetrieveServerConfigReq)
}
RetrieveServerConfigReq::RetrieveServerConfigReq(const RetrieveServerConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_type_, &from.server_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_group_id_) -
    reinterpret_cast<char*>(&server_type_)) + sizeof(server_group_id_));
  // @@protoc_insertion_point(copy_constructor:RetrieveServerConfigReq)
}

void RetrieveServerConfigReq::SharedCtor() {
  ::memset(&server_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_group_id_) -
      reinterpret_cast<char*>(&server_type_)) + sizeof(server_group_id_));
}

RetrieveServerConfigReq::~RetrieveServerConfigReq() {
  // @@protoc_insertion_point(destructor:RetrieveServerConfigReq)
  SharedDtor();
}

void RetrieveServerConfigReq::SharedDtor() {
}

void RetrieveServerConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetrieveServerConfigReq& RetrieveServerConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetrieveServerConfigReq_ListServer_2eproto.base);
  return *internal_default_instance();
}


void RetrieveServerConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:RetrieveServerConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&server_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_group_id_) -
      reinterpret_cast<char*>(&server_type_)) + sizeof(server_group_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetrieveServerConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetrieveServerConfigReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RetrieveServerConfigReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_group_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RetrieveServerConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RetrieveServerConfigReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetrieveServerConfigReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RetrieveServerConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_type = 1;
  if (this->server_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->server_type(), output);
  }

  // uint32 server_group_id = 2;
  if (this->server_group_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->server_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RetrieveServerConfigReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetrieveServerConfigReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RetrieveServerConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_type = 1;
  if (this->server_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_type(), target);
  }

  // uint32 server_group_id = 2;
  if (this->server_group_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RetrieveServerConfigReq)
  return target;
}

size_t RetrieveServerConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RetrieveServerConfigReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_type = 1;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->server_type());
  }

  // uint32 server_group_id = 2;
  if (this->server_group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->server_group_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveServerConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RetrieveServerConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RetrieveServerConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetrieveServerConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RetrieveServerConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RetrieveServerConfigReq)
    MergeFrom(*source);
  }
}

void RetrieveServerConfigReq::MergeFrom(const RetrieveServerConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RetrieveServerConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
  if (from.server_group_id() != 0) {
    set_server_group_id(from.server_group_id());
  }
}

void RetrieveServerConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RetrieveServerConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveServerConfigReq::CopyFrom(const RetrieveServerConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RetrieveServerConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveServerConfigReq::IsInitialized() const {
  return true;
}

void RetrieveServerConfigReq::InternalSwap(RetrieveServerConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_type_, other->server_type_);
  swap(server_group_id_, other->server_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveServerConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetrieveServerConfigAck::InitAsDefaultInstance() {
}
class RetrieveServerConfigAck::_Internal {
 public:
};

RetrieveServerConfigAck::RetrieveServerConfigAck()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RetrieveServerConfigAck)
}
RetrieveServerConfigAck::RetrieveServerConfigAck(const RetrieveServerConfigAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  listen_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.listen_ip().empty()) {
    listen_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listen_ip_);
  }
  db_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.db_ip().empty()) {
    db_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_ip_);
  }
  gate_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.gate_ip().empty()) {
    gate_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gate_ip_);
  }
  ::memcpy(&result_state_, &from.result_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&gate_port_) -
    reinterpret_cast<char*>(&result_state_)) + sizeof(gate_port_));
  // @@protoc_insertion_point(copy_constructor:RetrieveServerConfigAck)
}

void RetrieveServerConfigAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetrieveServerConfigAck_ListServer_2eproto.base);
  listen_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gate_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_port_) -
      reinterpret_cast<char*>(&result_state_)) + sizeof(gate_port_));
}

RetrieveServerConfigAck::~RetrieveServerConfigAck() {
  // @@protoc_insertion_point(destructor:RetrieveServerConfigAck)
  SharedDtor();
}

void RetrieveServerConfigAck::SharedDtor() {
  listen_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gate_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RetrieveServerConfigAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetrieveServerConfigAck& RetrieveServerConfigAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetrieveServerConfigAck_ListServer_2eproto.base);
  return *internal_default_instance();
}


void RetrieveServerConfigAck::Clear() {
// @@protoc_insertion_point(message_clear_start:RetrieveServerConfigAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listen_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  db_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gate_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gate_port_) -
      reinterpret_cast<char*>(&result_state_)) + sizeof(gate_port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RetrieveServerConfigAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RetrieveServerConfigAck.checkResult result_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result_state(static_cast<::RetrieveServerConfigAck_checkResult>(val));
        } else goto handle_unusual;
        continue;
      // string listen_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_listen_ip(), ptr, ctx, "RetrieveServerConfigAck.listen_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 listen_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          listen_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string db_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_db_ip(), ptr, ctx, "RetrieveServerConfigAck.db_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 db_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          db_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gate_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gate_ip(), ptr, ctx, "RetrieveServerConfigAck.gate_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gate_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gate_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RetrieveServerConfigAck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:RetrieveServerConfigAck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .RetrieveServerConfigAck.checkResult result_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_state(static_cast< ::RetrieveServerConfigAck_checkResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string listen_ip = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_listen_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->listen_ip().data(), static_cast<int>(this->listen_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "RetrieveServerConfigAck.listen_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 listen_port = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db_ip = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_db_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->db_ip().data(), static_cast<int>(this->db_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "RetrieveServerConfigAck.db_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 db_port = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &db_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gate_ip = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gate_ip().data(), static_cast<int>(this->gate_ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "RetrieveServerConfigAck.gate_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gate_port = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RetrieveServerConfigAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RetrieveServerConfigAck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RetrieveServerConfigAck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RetrieveServerConfigAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RetrieveServerConfigAck.checkResult result_state = 1;
  if (this->result_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result_state(), output);
  }

  // string listen_ip = 2;
  if (this->listen_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->listen_ip().data(), static_cast<int>(this->listen_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RetrieveServerConfigAck.listen_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->listen_ip(), output);
  }

  // uint32 listen_port = 3;
  if (this->listen_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->listen_port(), output);
  }

  // string db_ip = 4;
  if (this->db_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_ip().data(), static_cast<int>(this->db_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RetrieveServerConfigAck.db_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->db_ip(), output);
  }

  // uint32 db_port = 5;
  if (this->db_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->db_port(), output);
  }

  // string gate_ip = 6;
  if (this->gate_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gate_ip().data(), static_cast<int>(this->gate_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RetrieveServerConfigAck.gate_ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gate_ip(), output);
  }

  // uint32 gate_port = 7;
  if (this->gate_port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->gate_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RetrieveServerConfigAck)
}

::PROTOBUF_NAMESPACE_ID::uint8* RetrieveServerConfigAck::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RetrieveServerConfigAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RetrieveServerConfigAck.checkResult result_state = 1;
  if (this->result_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_state(), target);
  }

  // string listen_ip = 2;
  if (this->listen_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->listen_ip().data(), static_cast<int>(this->listen_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RetrieveServerConfigAck.listen_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->listen_ip(), target);
  }

  // uint32 listen_port = 3;
  if (this->listen_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->listen_port(), target);
  }

  // string db_ip = 4;
  if (this->db_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->db_ip().data(), static_cast<int>(this->db_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RetrieveServerConfigAck.db_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->db_ip(), target);
  }

  // uint32 db_port = 5;
  if (this->db_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->db_port(), target);
  }

  // string gate_ip = 6;
  if (this->gate_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gate_ip().data(), static_cast<int>(this->gate_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RetrieveServerConfigAck.gate_ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->gate_ip(), target);
  }

  // uint32 gate_port = 7;
  if (this->gate_port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->gate_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RetrieveServerConfigAck)
  return target;
}

size_t RetrieveServerConfigAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RetrieveServerConfigAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string listen_ip = 2;
  if (this->listen_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->listen_ip());
  }

  // string db_ip = 4;
  if (this->db_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->db_ip());
  }

  // string gate_ip = 6;
  if (this->gate_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gate_ip());
  }

  // .RetrieveServerConfigAck.checkResult result_state = 1;
  if (this->result_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result_state());
  }

  // uint32 listen_port = 3;
  if (this->listen_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->listen_port());
  }

  // uint32 db_port = 5;
  if (this->db_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->db_port());
  }

  // uint32 gate_port = 7;
  if (this->gate_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->gate_port());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveServerConfigAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RetrieveServerConfigAck)
  GOOGLE_DCHECK_NE(&from, this);
  const RetrieveServerConfigAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetrieveServerConfigAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RetrieveServerConfigAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RetrieveServerConfigAck)
    MergeFrom(*source);
  }
}

void RetrieveServerConfigAck::MergeFrom(const RetrieveServerConfigAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RetrieveServerConfigAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.listen_ip().size() > 0) {

    listen_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.listen_ip_);
  }
  if (from.db_ip().size() > 0) {

    db_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.db_ip_);
  }
  if (from.gate_ip().size() > 0) {

    gate_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gate_ip_);
  }
  if (from.result_state() != 0) {
    set_result_state(from.result_state());
  }
  if (from.listen_port() != 0) {
    set_listen_port(from.listen_port());
  }
  if (from.db_port() != 0) {
    set_db_port(from.db_port());
  }
  if (from.gate_port() != 0) {
    set_gate_port(from.gate_port());
  }
}

void RetrieveServerConfigAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RetrieveServerConfigAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveServerConfigAck::CopyFrom(const RetrieveServerConfigAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RetrieveServerConfigAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveServerConfigAck::IsInitialized() const {
  return true;
}

void RetrieveServerConfigAck::InternalSwap(RetrieveServerConfigAck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  listen_ip_.Swap(&other->listen_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_ip_.Swap(&other->db_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gate_ip_.Swap(&other->gate_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_state_, other->result_state_);
  swap(listen_port_, other->listen_port_);
  swap(db_port_, other->db_port_);
  swap(gate_port_, other->gate_port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveServerConfigAck::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RetrieveServerConfigReq* Arena::CreateMaybeMessage< ::RetrieveServerConfigReq >(Arena* arena) {
  return Arena::CreateInternal< ::RetrieveServerConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::RetrieveServerConfigAck* Arena::CreateMaybeMessage< ::RetrieveServerConfigAck >(Arena* arena) {
  return Arena::CreateInternal< ::RetrieveServerConfigAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
