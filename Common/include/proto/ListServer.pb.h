// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ListServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ListServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ListServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ListServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ListServer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ListServer_2eproto;
class RetrieveServerConfigAck;
class RetrieveServerConfigAckDefaultTypeInternal;
extern RetrieveServerConfigAckDefaultTypeInternal _RetrieveServerConfigAck_default_instance_;
class RetrieveServerConfigReq;
class RetrieveServerConfigReqDefaultTypeInternal;
extern RetrieveServerConfigReqDefaultTypeInternal _RetrieveServerConfigReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RetrieveServerConfigAck* Arena::CreateMaybeMessage<::RetrieveServerConfigAck>(Arena*);
template<> ::RetrieveServerConfigReq* Arena::CreateMaybeMessage<::RetrieveServerConfigReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RetrieveServerConfigAck_checkResult : int {
  RetrieveServerConfigAck_checkResult_success = 0,
  RetrieveServerConfigAck_checkResult_notExists = 1,
  RetrieveServerConfigAck_checkResult_RetrieveServerConfigAck_checkResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RetrieveServerConfigAck_checkResult_RetrieveServerConfigAck_checkResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RetrieveServerConfigAck_checkResult_IsValid(int value);
constexpr RetrieveServerConfigAck_checkResult RetrieveServerConfigAck_checkResult_checkResult_MIN = RetrieveServerConfigAck_checkResult_success;
constexpr RetrieveServerConfigAck_checkResult RetrieveServerConfigAck_checkResult_checkResult_MAX = RetrieveServerConfigAck_checkResult_notExists;
constexpr int RetrieveServerConfigAck_checkResult_checkResult_ARRAYSIZE = RetrieveServerConfigAck_checkResult_checkResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RetrieveServerConfigAck_checkResult_descriptor();
template<typename T>
inline const std::string& RetrieveServerConfigAck_checkResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RetrieveServerConfigAck_checkResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RetrieveServerConfigAck_checkResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RetrieveServerConfigAck_checkResult_descriptor(), enum_t_value);
}
inline bool RetrieveServerConfigAck_checkResult_Parse(
    const std::string& name, RetrieveServerConfigAck_checkResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RetrieveServerConfigAck_checkResult>(
    RetrieveServerConfigAck_checkResult_descriptor(), name, value);
}
// ===================================================================

class RetrieveServerConfigReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RetrieveServerConfigReq) */ {
 public:
  RetrieveServerConfigReq();
  virtual ~RetrieveServerConfigReq();

  RetrieveServerConfigReq(const RetrieveServerConfigReq& from);
  RetrieveServerConfigReq(RetrieveServerConfigReq&& from) noexcept
    : RetrieveServerConfigReq() {
    *this = ::std::move(from);
  }

  inline RetrieveServerConfigReq& operator=(const RetrieveServerConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveServerConfigReq& operator=(RetrieveServerConfigReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetrieveServerConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetrieveServerConfigReq* internal_default_instance() {
    return reinterpret_cast<const RetrieveServerConfigReq*>(
               &_RetrieveServerConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RetrieveServerConfigReq& a, RetrieveServerConfigReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveServerConfigReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetrieveServerConfigReq* New() const final {
    return CreateMaybeMessage<RetrieveServerConfigReq>(nullptr);
  }

  RetrieveServerConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetrieveServerConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetrieveServerConfigReq& from);
  void MergeFrom(const RetrieveServerConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveServerConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RetrieveServerConfigReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ListServer_2eproto);
    return ::descriptor_table_ListServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTypeFieldNumber = 1,
    kServerGroupIdFieldNumber = 2,
  };
  // uint32 server_type = 1;
  void clear_server_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_type() const;
  void set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 server_group_id = 2;
  void clear_server_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_group_id() const;
  void set_server_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:RetrieveServerConfigReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ListServer_2eproto;
};
// -------------------------------------------------------------------

class RetrieveServerConfigAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RetrieveServerConfigAck) */ {
 public:
  RetrieveServerConfigAck();
  virtual ~RetrieveServerConfigAck();

  RetrieveServerConfigAck(const RetrieveServerConfigAck& from);
  RetrieveServerConfigAck(RetrieveServerConfigAck&& from) noexcept
    : RetrieveServerConfigAck() {
    *this = ::std::move(from);
  }

  inline RetrieveServerConfigAck& operator=(const RetrieveServerConfigAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RetrieveServerConfigAck& operator=(RetrieveServerConfigAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RetrieveServerConfigAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RetrieveServerConfigAck* internal_default_instance() {
    return reinterpret_cast<const RetrieveServerConfigAck*>(
               &_RetrieveServerConfigAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RetrieveServerConfigAck& a, RetrieveServerConfigAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RetrieveServerConfigAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RetrieveServerConfigAck* New() const final {
    return CreateMaybeMessage<RetrieveServerConfigAck>(nullptr);
  }

  RetrieveServerConfigAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RetrieveServerConfigAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RetrieveServerConfigAck& from);
  void MergeFrom(const RetrieveServerConfigAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RetrieveServerConfigAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RetrieveServerConfigAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ListServer_2eproto);
    return ::descriptor_table_ListServer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RetrieveServerConfigAck_checkResult checkResult;
  static constexpr checkResult success =
    RetrieveServerConfigAck_checkResult_success;
  static constexpr checkResult notExists =
    RetrieveServerConfigAck_checkResult_notExists;
  static inline bool checkResult_IsValid(int value) {
    return RetrieveServerConfigAck_checkResult_IsValid(value);
  }
  static constexpr checkResult checkResult_MIN =
    RetrieveServerConfigAck_checkResult_checkResult_MIN;
  static constexpr checkResult checkResult_MAX =
    RetrieveServerConfigAck_checkResult_checkResult_MAX;
  static constexpr int checkResult_ARRAYSIZE =
    RetrieveServerConfigAck_checkResult_checkResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  checkResult_descriptor() {
    return RetrieveServerConfigAck_checkResult_descriptor();
  }
  template<typename T>
  static inline const std::string& checkResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, checkResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function checkResult_Name.");
    return RetrieveServerConfigAck_checkResult_Name(enum_t_value);
  }
  static inline bool checkResult_Parse(const std::string& name,
      checkResult* value) {
    return RetrieveServerConfigAck_checkResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kListenIpFieldNumber = 2,
    kDbIpFieldNumber = 4,
    kGateIpFieldNumber = 6,
    kResultStateFieldNumber = 1,
    kListenPortFieldNumber = 3,
    kDbPortFieldNumber = 5,
    kGatePortFieldNumber = 7,
  };
  // string listen_ip = 2;
  void clear_listen_ip();
  const std::string& listen_ip() const;
  void set_listen_ip(const std::string& value);
  void set_listen_ip(std::string&& value);
  void set_listen_ip(const char* value);
  void set_listen_ip(const char* value, size_t size);
  std::string* mutable_listen_ip();
  std::string* release_listen_ip();
  void set_allocated_listen_ip(std::string* listen_ip);

  // string db_ip = 4;
  void clear_db_ip();
  const std::string& db_ip() const;
  void set_db_ip(const std::string& value);
  void set_db_ip(std::string&& value);
  void set_db_ip(const char* value);
  void set_db_ip(const char* value, size_t size);
  std::string* mutable_db_ip();
  std::string* release_db_ip();
  void set_allocated_db_ip(std::string* db_ip);

  // string gate_ip = 6;
  void clear_gate_ip();
  const std::string& gate_ip() const;
  void set_gate_ip(const std::string& value);
  void set_gate_ip(std::string&& value);
  void set_gate_ip(const char* value);
  void set_gate_ip(const char* value, size_t size);
  std::string* mutable_gate_ip();
  std::string* release_gate_ip();
  void set_allocated_gate_ip(std::string* gate_ip);

  // .RetrieveServerConfigAck.checkResult result_state = 1;
  void clear_result_state();
  ::RetrieveServerConfigAck_checkResult result_state() const;
  void set_result_state(::RetrieveServerConfigAck_checkResult value);

  // uint32 listen_port = 3;
  void clear_listen_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 listen_port() const;
  void set_listen_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 db_port = 5;
  void clear_db_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 db_port() const;
  void set_db_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 gate_port = 7;
  void clear_gate_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_port() const;
  void set_gate_port(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:RetrieveServerConfigAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listen_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gate_ip_;
  int result_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 listen_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 db_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gate_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ListServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RetrieveServerConfigReq

// uint32 server_type = 1;
inline void RetrieveServerConfigReq::clear_server_type() {
  server_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RetrieveServerConfigReq::server_type() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigReq.server_type)
  return server_type_;
}
inline void RetrieveServerConfigReq::set_server_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:RetrieveServerConfigReq.server_type)
}

// uint32 server_group_id = 2;
inline void RetrieveServerConfigReq::clear_server_group_id() {
  server_group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RetrieveServerConfigReq::server_group_id() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigReq.server_group_id)
  return server_group_id_;
}
inline void RetrieveServerConfigReq::set_server_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_group_id_ = value;
  // @@protoc_insertion_point(field_set:RetrieveServerConfigReq.server_group_id)
}

// -------------------------------------------------------------------

// RetrieveServerConfigAck

// .RetrieveServerConfigAck.checkResult result_state = 1;
inline void RetrieveServerConfigAck::clear_result_state() {
  result_state_ = 0;
}
inline ::RetrieveServerConfigAck_checkResult RetrieveServerConfigAck::result_state() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigAck.result_state)
  return static_cast< ::RetrieveServerConfigAck_checkResult >(result_state_);
}
inline void RetrieveServerConfigAck::set_result_state(::RetrieveServerConfigAck_checkResult value) {
  
  result_state_ = value;
  // @@protoc_insertion_point(field_set:RetrieveServerConfigAck.result_state)
}

// string listen_ip = 2;
inline void RetrieveServerConfigAck::clear_listen_ip() {
  listen_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetrieveServerConfigAck::listen_ip() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigAck.listen_ip)
  return listen_ip_.GetNoArena();
}
inline void RetrieveServerConfigAck::set_listen_ip(const std::string& value) {
  
  listen_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RetrieveServerConfigAck.listen_ip)
}
inline void RetrieveServerConfigAck::set_listen_ip(std::string&& value) {
  
  listen_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RetrieveServerConfigAck.listen_ip)
}
inline void RetrieveServerConfigAck::set_listen_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  listen_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RetrieveServerConfigAck.listen_ip)
}
inline void RetrieveServerConfigAck::set_listen_ip(const char* value, size_t size) {
  
  listen_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RetrieveServerConfigAck.listen_ip)
}
inline std::string* RetrieveServerConfigAck::mutable_listen_ip() {
  
  // @@protoc_insertion_point(field_mutable:RetrieveServerConfigAck.listen_ip)
  return listen_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetrieveServerConfigAck::release_listen_ip() {
  // @@protoc_insertion_point(field_release:RetrieveServerConfigAck.listen_ip)
  
  return listen_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetrieveServerConfigAck::set_allocated_listen_ip(std::string* listen_ip) {
  if (listen_ip != nullptr) {
    
  } else {
    
  }
  listen_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listen_ip);
  // @@protoc_insertion_point(field_set_allocated:RetrieveServerConfigAck.listen_ip)
}

// uint32 listen_port = 3;
inline void RetrieveServerConfigAck::clear_listen_port() {
  listen_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RetrieveServerConfigAck::listen_port() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigAck.listen_port)
  return listen_port_;
}
inline void RetrieveServerConfigAck::set_listen_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  listen_port_ = value;
  // @@protoc_insertion_point(field_set:RetrieveServerConfigAck.listen_port)
}

// string db_ip = 4;
inline void RetrieveServerConfigAck::clear_db_ip() {
  db_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetrieveServerConfigAck::db_ip() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigAck.db_ip)
  return db_ip_.GetNoArena();
}
inline void RetrieveServerConfigAck::set_db_ip(const std::string& value) {
  
  db_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RetrieveServerConfigAck.db_ip)
}
inline void RetrieveServerConfigAck::set_db_ip(std::string&& value) {
  
  db_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RetrieveServerConfigAck.db_ip)
}
inline void RetrieveServerConfigAck::set_db_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  db_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RetrieveServerConfigAck.db_ip)
}
inline void RetrieveServerConfigAck::set_db_ip(const char* value, size_t size) {
  
  db_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RetrieveServerConfigAck.db_ip)
}
inline std::string* RetrieveServerConfigAck::mutable_db_ip() {
  
  // @@protoc_insertion_point(field_mutable:RetrieveServerConfigAck.db_ip)
  return db_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetrieveServerConfigAck::release_db_ip() {
  // @@protoc_insertion_point(field_release:RetrieveServerConfigAck.db_ip)
  
  return db_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetrieveServerConfigAck::set_allocated_db_ip(std::string* db_ip) {
  if (db_ip != nullptr) {
    
  } else {
    
  }
  db_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), db_ip);
  // @@protoc_insertion_point(field_set_allocated:RetrieveServerConfigAck.db_ip)
}

// uint32 db_port = 5;
inline void RetrieveServerConfigAck::clear_db_port() {
  db_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RetrieveServerConfigAck::db_port() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigAck.db_port)
  return db_port_;
}
inline void RetrieveServerConfigAck::set_db_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  db_port_ = value;
  // @@protoc_insertion_point(field_set:RetrieveServerConfigAck.db_port)
}

// string gate_ip = 6;
inline void RetrieveServerConfigAck::clear_gate_ip() {
  gate_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RetrieveServerConfigAck::gate_ip() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigAck.gate_ip)
  return gate_ip_.GetNoArena();
}
inline void RetrieveServerConfigAck::set_gate_ip(const std::string& value) {
  
  gate_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RetrieveServerConfigAck.gate_ip)
}
inline void RetrieveServerConfigAck::set_gate_ip(std::string&& value) {
  
  gate_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RetrieveServerConfigAck.gate_ip)
}
inline void RetrieveServerConfigAck::set_gate_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gate_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RetrieveServerConfigAck.gate_ip)
}
inline void RetrieveServerConfigAck::set_gate_ip(const char* value, size_t size) {
  
  gate_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RetrieveServerConfigAck.gate_ip)
}
inline std::string* RetrieveServerConfigAck::mutable_gate_ip() {
  
  // @@protoc_insertion_point(field_mutable:RetrieveServerConfigAck.gate_ip)
  return gate_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RetrieveServerConfigAck::release_gate_ip() {
  // @@protoc_insertion_point(field_release:RetrieveServerConfigAck.gate_ip)
  
  return gate_ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RetrieveServerConfigAck::set_allocated_gate_ip(std::string* gate_ip) {
  if (gate_ip != nullptr) {
    
  } else {
    
  }
  gate_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gate_ip);
  // @@protoc_insertion_point(field_set_allocated:RetrieveServerConfigAck.gate_ip)
}

// uint32 gate_port = 7;
inline void RetrieveServerConfigAck::clear_gate_port() {
  gate_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RetrieveServerConfigAck::gate_port() const {
  // @@protoc_insertion_point(field_get:RetrieveServerConfigAck.gate_port)
  return gate_port_;
}
inline void RetrieveServerConfigAck::set_gate_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  gate_port_ = value;
  // @@protoc_insertion_point(field_set:RetrieveServerConfigAck.gate_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RetrieveServerConfigAck_checkResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RetrieveServerConfigAck_checkResult>() {
  return ::RetrieveServerConfigAck_checkResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ListServer_2eproto
