// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataBase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DataBase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DataBase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DataBase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DataBase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataBase_2eproto;
class DataBaseAck;
class DataBaseAckDefaultTypeInternal;
extern DataBaseAckDefaultTypeInternal _DataBaseAck_default_instance_;
class DataBaseReq;
class DataBaseReqDefaultTypeInternal;
extern DataBaseReqDefaultTypeInternal _DataBaseReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DataBaseAck* Arena::CreateMaybeMessage<::DataBaseAck>(Arena*);
template<> ::DataBaseReq* Arena::CreateMaybeMessage<::DataBaseReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DataBaseReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataBaseReq) */ {
 public:
  DataBaseReq();
  virtual ~DataBaseReq();

  DataBaseReq(const DataBaseReq& from);
  DataBaseReq(DataBaseReq&& from) noexcept
    : DataBaseReq() {
    *this = ::std::move(from);
  }

  inline DataBaseReq& operator=(const DataBaseReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataBaseReq& operator=(DataBaseReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataBaseReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBaseReq* internal_default_instance() {
    return reinterpret_cast<const DataBaseReq*>(
               &_DataBaseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataBaseReq& a, DataBaseReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DataBaseReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataBaseReq* New() const final {
    return CreateMaybeMessage<DataBaseReq>(nullptr);
  }

  DataBaseReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataBaseReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataBaseReq& from);
  void MergeFrom(const DataBaseReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBaseReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataBaseReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DataBase_2eproto);
    return ::descriptor_table_DataBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kValFieldNumber = 4,
    kMsgIdFieldNumber = 1,
    kCmdOpFieldNumber = 2,
  };
  // bytes key = 3;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // bytes val = 4;
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const void* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);

  // uint64 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 cmd_op = 2;
  void clear_cmd_op();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_op() const;
  void set_cmd_op(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:DataBaseReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataBase_2eproto;
};
// -------------------------------------------------------------------

class DataBaseAck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataBaseAck) */ {
 public:
  DataBaseAck();
  virtual ~DataBaseAck();

  DataBaseAck(const DataBaseAck& from);
  DataBaseAck(DataBaseAck&& from) noexcept
    : DataBaseAck() {
    *this = ::std::move(from);
  }

  inline DataBaseAck& operator=(const DataBaseAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataBaseAck& operator=(DataBaseAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataBaseAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataBaseAck* internal_default_instance() {
    return reinterpret_cast<const DataBaseAck*>(
               &_DataBaseAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataBaseAck& a, DataBaseAck& b) {
    a.Swap(&b);
  }
  inline void Swap(DataBaseAck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataBaseAck* New() const final {
    return CreateMaybeMessage<DataBaseAck>(nullptr);
  }

  DataBaseAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataBaseAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataBaseAck& from);
  void MergeFrom(const DataBaseAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataBaseAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataBaseAck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DataBase_2eproto);
    return ::descriptor_table_DataBase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 3,
    kMsgIdFieldNumber = 1,
    kQueryStateFieldNumber = 2,
  };
  // bytes result_str = 3;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const void* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);

  // uint64 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 query_state = 2;
  void clear_query_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 query_state() const;
  void set_query_state(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:DataBaseAck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msg_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 query_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DataBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataBaseReq

// uint64 msg_id = 1;
inline void DataBaseReq::clear_msg_id() {
  msg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataBaseReq::msg_id() const {
  // @@protoc_insertion_point(field_get:DataBaseReq.msg_id)
  return msg_id_;
}
inline void DataBaseReq::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:DataBaseReq.msg_id)
}

// uint32 cmd_op = 2;
inline void DataBaseReq::clear_cmd_op() {
  cmd_op_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataBaseReq::cmd_op() const {
  // @@protoc_insertion_point(field_get:DataBaseReq.cmd_op)
  return cmd_op_;
}
inline void DataBaseReq::set_cmd_op(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmd_op_ = value;
  // @@protoc_insertion_point(field_set:DataBaseReq.cmd_op)
}

// bytes key = 3;
inline void DataBaseReq::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataBaseReq::key() const {
  // @@protoc_insertion_point(field_get:DataBaseReq.key)
  return key_.GetNoArena();
}
inline void DataBaseReq::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataBaseReq.key)
}
inline void DataBaseReq::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataBaseReq.key)
}
inline void DataBaseReq::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataBaseReq.key)
}
inline void DataBaseReq::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataBaseReq.key)
}
inline std::string* DataBaseReq::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:DataBaseReq.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataBaseReq::release_key() {
  // @@protoc_insertion_point(field_release:DataBaseReq.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataBaseReq::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:DataBaseReq.key)
}

// bytes val = 4;
inline void DataBaseReq::clear_val() {
  val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataBaseReq::val() const {
  // @@protoc_insertion_point(field_get:DataBaseReq.val)
  return val_.GetNoArena();
}
inline void DataBaseReq::set_val(const std::string& value) {
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataBaseReq.val)
}
inline void DataBaseReq::set_val(std::string&& value) {
  
  val_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataBaseReq.val)
}
inline void DataBaseReq::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataBaseReq.val)
}
inline void DataBaseReq::set_val(const void* value, size_t size) {
  
  val_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataBaseReq.val)
}
inline std::string* DataBaseReq::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:DataBaseReq.val)
  return val_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataBaseReq::release_val() {
  // @@protoc_insertion_point(field_release:DataBaseReq.val)
  
  return val_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataBaseReq::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:DataBaseReq.val)
}

// -------------------------------------------------------------------

// DataBaseAck

// uint64 msg_id = 1;
inline void DataBaseAck::clear_msg_id() {
  msg_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataBaseAck::msg_id() const {
  // @@protoc_insertion_point(field_get:DataBaseAck.msg_id)
  return msg_id_;
}
inline void DataBaseAck::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:DataBaseAck.msg_id)
}

// uint32 query_state = 2;
inline void DataBaseAck::clear_query_state() {
  query_state_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataBaseAck::query_state() const {
  // @@protoc_insertion_point(field_get:DataBaseAck.query_state)
  return query_state_;
}
inline void DataBaseAck::set_query_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  query_state_ = value;
  // @@protoc_insertion_point(field_set:DataBaseAck.query_state)
}

// bytes result_str = 3;
inline void DataBaseAck::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataBaseAck::result_str() const {
  // @@protoc_insertion_point(field_get:DataBaseAck.result_str)
  return result_str_.GetNoArena();
}
inline void DataBaseAck::set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataBaseAck.result_str)
}
inline void DataBaseAck::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataBaseAck.result_str)
}
inline void DataBaseAck::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataBaseAck.result_str)
}
inline void DataBaseAck::set_result_str(const void* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataBaseAck.result_str)
}
inline std::string* DataBaseAck::mutable_result_str() {
  
  // @@protoc_insertion_point(field_mutable:DataBaseAck.result_str)
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataBaseAck::release_result_str() {
  // @@protoc_insertion_point(field_release:DataBaseAck.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataBaseAck::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:DataBaseAck.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DataBase_2eproto
