// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Session.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Session_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Session_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Session_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Session_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Session_2eproto;
class SessionDestory;
class SessionDestoryDefaultTypeInternal;
extern SessionDestoryDefaultTypeInternal _SessionDestory_default_instance_;
class SessionPack;
class SessionPackDefaultTypeInternal;
extern SessionPackDefaultTypeInternal _SessionPack_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SessionDestory* Arena::CreateMaybeMessage<::SessionDestory>(Arena*);
template<> ::SessionPack* Arena::CreateMaybeMessage<::SessionPack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SessionPack :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SessionPack) */ {
 public:
  SessionPack();
  virtual ~SessionPack();

  SessionPack(const SessionPack& from);
  SessionPack(SessionPack&& from) noexcept
    : SessionPack() {
    *this = ::std::move(from);
  }

  inline SessionPack& operator=(const SessionPack& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionPack& operator=(SessionPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionPack* internal_default_instance() {
    return reinterpret_cast<const SessionPack*>(
               &_SessionPack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionPack& a, SessionPack& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionPack* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionPack* New() const final {
    return CreateMaybeMessage<SessionPack>(nullptr);
  }

  SessionPack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionPack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionPack& from);
  void MergeFrom(const SessionPack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionPack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SessionPack";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Session_2eproto);
    return ::descriptor_table_Session_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackNameFieldNumber = 2,
    kPackStrFieldNumber = 3,
    kSeesionIdFieldNumber = 1,
  };
  // bytes pack_name = 2;
  void clear_pack_name();
  const std::string& pack_name() const;
  void set_pack_name(const std::string& value);
  void set_pack_name(std::string&& value);
  void set_pack_name(const char* value);
  void set_pack_name(const void* value, size_t size);
  std::string* mutable_pack_name();
  std::string* release_pack_name();
  void set_allocated_pack_name(std::string* pack_name);

  // bytes pack_str = 3;
  void clear_pack_str();
  const std::string& pack_str() const;
  void set_pack_str(const std::string& value);
  void set_pack_str(std::string&& value);
  void set_pack_str(const char* value);
  void set_pack_str(const void* value, size_t size);
  std::string* mutable_pack_str();
  std::string* release_pack_str();
  void set_allocated_pack_str(std::string* pack_str);

  // uint32 seesion_id = 1;
  void clear_seesion_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 seesion_id() const;
  void set_seesion_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:SessionPack)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pack_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pack_str_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seesion_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Session_2eproto;
};
// -------------------------------------------------------------------

class SessionDestory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SessionDestory) */ {
 public:
  SessionDestory();
  virtual ~SessionDestory();

  SessionDestory(const SessionDestory& from);
  SessionDestory(SessionDestory&& from) noexcept
    : SessionDestory() {
    *this = ::std::move(from);
  }

  inline SessionDestory& operator=(const SessionDestory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionDestory& operator=(SessionDestory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionDestory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionDestory* internal_default_instance() {
    return reinterpret_cast<const SessionDestory*>(
               &_SessionDestory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionDestory& a, SessionDestory& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionDestory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionDestory* New() const final {
    return CreateMaybeMessage<SessionDestory>(nullptr);
  }

  SessionDestory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionDestory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionDestory& from);
  void MergeFrom(const SessionDestory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionDestory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SessionDestory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Session_2eproto);
    return ::descriptor_table_Session_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeesionIdFieldNumber = 1,
  };
  // uint32 seesion_id = 1;
  void clear_seesion_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 seesion_id() const;
  void set_seesion_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:SessionDestory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seesion_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Session_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionPack

// uint32 seesion_id = 1;
inline void SessionPack::clear_seesion_id() {
  seesion_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionPack::seesion_id() const {
  // @@protoc_insertion_point(field_get:SessionPack.seesion_id)
  return seesion_id_;
}
inline void SessionPack::set_seesion_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seesion_id_ = value;
  // @@protoc_insertion_point(field_set:SessionPack.seesion_id)
}

// bytes pack_name = 2;
inline void SessionPack::clear_pack_name() {
  pack_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionPack::pack_name() const {
  // @@protoc_insertion_point(field_get:SessionPack.pack_name)
  return pack_name_.GetNoArena();
}
inline void SessionPack::set_pack_name(const std::string& value) {
  
  pack_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SessionPack.pack_name)
}
inline void SessionPack::set_pack_name(std::string&& value) {
  
  pack_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SessionPack.pack_name)
}
inline void SessionPack::set_pack_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pack_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SessionPack.pack_name)
}
inline void SessionPack::set_pack_name(const void* value, size_t size) {
  
  pack_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SessionPack.pack_name)
}
inline std::string* SessionPack::mutable_pack_name() {
  
  // @@protoc_insertion_point(field_mutable:SessionPack.pack_name)
  return pack_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionPack::release_pack_name() {
  // @@protoc_insertion_point(field_release:SessionPack.pack_name)
  
  return pack_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionPack::set_allocated_pack_name(std::string* pack_name) {
  if (pack_name != nullptr) {
    
  } else {
    
  }
  pack_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pack_name);
  // @@protoc_insertion_point(field_set_allocated:SessionPack.pack_name)
}

// bytes pack_str = 3;
inline void SessionPack::clear_pack_str() {
  pack_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SessionPack::pack_str() const {
  // @@protoc_insertion_point(field_get:SessionPack.pack_str)
  return pack_str_.GetNoArena();
}
inline void SessionPack::set_pack_str(const std::string& value) {
  
  pack_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SessionPack.pack_str)
}
inline void SessionPack::set_pack_str(std::string&& value) {
  
  pack_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SessionPack.pack_str)
}
inline void SessionPack::set_pack_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pack_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SessionPack.pack_str)
}
inline void SessionPack::set_pack_str(const void* value, size_t size) {
  
  pack_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SessionPack.pack_str)
}
inline std::string* SessionPack::mutable_pack_str() {
  
  // @@protoc_insertion_point(field_mutable:SessionPack.pack_str)
  return pack_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SessionPack::release_pack_str() {
  // @@protoc_insertion_point(field_release:SessionPack.pack_str)
  
  return pack_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SessionPack::set_allocated_pack_str(std::string* pack_str) {
  if (pack_str != nullptr) {
    
  } else {
    
  }
  pack_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pack_str);
  // @@protoc_insertion_point(field_set_allocated:SessionPack.pack_str)
}

// -------------------------------------------------------------------

// SessionDestory

// uint32 seesion_id = 1;
inline void SessionDestory::clear_seesion_id() {
  seesion_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SessionDestory::seesion_id() const {
  // @@protoc_insertion_point(field_get:SessionDestory.seesion_id)
  return seesion_id_;
}
inline void SessionDestory::set_seesion_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seesion_id_ = value;
  // @@protoc_insertion_point(field_set:SessionDestory.seesion_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Session_2eproto
